
import java.io.DataInputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.net.*;
import java.util.HashMap;
import java.lang.Math;


class JavaServer extends Thread {

	public Socket s1;
	PrintStream out;
	Integer portnumber=null;
	static Integer arr[]=new Integer[4];
	static Integer k=0;
	
	public static void main(String[] args){
		try
		{
			
			DatagramSocket datagramSocket = new DatagramSocket(15000);
			HashMap<Integer,Bacon> hs=new HashMap<Integer, Bacon>();
			
			while(true)
			{
			byte[] buffer = new byte[37];
			JavaServer js;
			System.out.println("listening code");
			
			DatagramPacket packet = new DatagramPacket(buffer, buffer.length);		
			datagramSocket.receive(packet);
			
			// client port number
			Integer portnum[] = new Integer[4];
			int i = 0;
			while( i<=3)
	         {				
				portnum[i]=convert(buffer[i]);	
				i++;
	          }
			
			// client date
			byte[] date1=new byte[11];
			int z=0;
			for(i=4;i<15;i++)
			{
				
				date1[z]=buffer[i];
				z++;
				
			}
			
			// client time
			byte[] time1=new byte[9];
			z=0;
			for(i=15;i<24;i++)
			{
				time1[z]=buffer[i];
				z++;
				
			}
			
			// client IP Address
			byte[] ipAdd1 = new byte[13];
			z=0;
			for(i=24;i<37;i++)
			{
				ipAdd1[z]=buffer[i];
				z++;
				
			}
			// convert byte to Java primitive type
			
			Integer portnumber=BytetoInt(portnum);
			String sDate=new String(date1);
			String stime=new String(time1);
			String sipAdd=new String(ipAdd1);
			
			
			System.out.println("PortNumber of the client :"+portnumber);
			System.out.println("Client time  :"+stime);
			System.out.println("Client sDate  :"+ sDate);
			System.out.println("Client sIP Address  :"+sipAdd);
			 
			Bacon b=new Bacon(portnumber, sDate, stime, sipAdd);
			
			
			hs.put(portnumber,b);
			
			
			Integer j=0;
			
			while(j<3)
			{
				if(portnumber.equals(arr[j]))
				{	
					System.out.println("in array already");
					break;
				}
				else
				{
					j++;
				}
			}
				if(j==3)
				{	
				arr[k]=portnumber;
				k++;
				js=new JavaServer();
				js.setSocket(portnumber);
				js.start();
				}
			}
			
		}
	
		catch(Exception e)
		{
			System.out.println(e.getMessage());
		}
		
	}
	
	
	@Override
	public void run()
	{
		ServerSocket ss=null;
	
		
	try{
		
		ss=new ServerSocket(portnumber);
		System.out.println("TCP connecting is waiting for portnumber :"+portnumber);
		Socket s1=ss.accept();
		System.out.println("TCP Connection extablished");	
		System.out.println(" Thread Running " + Thread.currentThread().getName()); 
		System.out.println("Accepted cn from " +s1.getInetAddress().getHostName() +"Port" + s1.getPort());
		
		// connection established , now send and receive data from client
		
		DataInputStream dis = new DataInputStream(s1.getInputStream());			
		
		//Asked what is client operating system
		out=new PrintStream(s1.getOutputStream());   
        String s="What is your OS\n";
        out.println(s);
        out.flush();
        
        
        // read from client about its operating system
        String ans=dis.readLine();
        System.out.println("Response from client"+ans);
        
       //-------------------------------------------------//
        
        out.println("Got your operating system -----"+ans+"--thansks!!");
        out.flush();
        	 
       
    // Closing socket of the TCP created
    	ss.close();
    	
    // reseting the array and deleting port from buffer
	}
        catch(Exception e)
        {
        	System.out.println(e.getMessage());
        }
        finally{
        	
        	int j=0;
        	while(j<3)
    		{
    			if(portnumber.equals(arr[j]))
    			{	
    				arr[j]=null;
    				k--;
    				System.out.println("reset array in final");
    				System.out.println("Client Disconnected");
    			}
    			else
    			{	
    			j++;
    			}
    		}
        	
        	try {
        		
				ss.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
        }
        
        
	}
	
	
	
	
	
	public void setSocket(Integer c){
		portnumber=c;
	}
	
	
	// conversion of byte to signed
	public static int convert(byte b)
	{
		if (b < 0) return 256 + b;
		return b;
			
	}
	
	// getSystem OS
	public static String  getOS() {
		//return OS
		 return System.getProperty("os.name");
	}
	
	
	
	public static Integer BytetoInt(Integer arr[])
	{
		
		Integer number=0;
		Integer length=arr.length-1;
		
		while(length>-1)
		{
			int i=(int)(Math.pow(256,length));
			int j=arr[length];
			number=number+(i*j);
			length--;
		}
		
		return number;
	}
	
}